!pip install openpyxl

from google.colab import files
uploaded = files.upload()

from google.colab import drive
drive.mount('/content/drive')

!ls "/content/drive/My Drive"

!ls "/content/drive/My Drive/Colab Notebooks"

import pandas as pd
dataset_path = '/content/drive/My Drive/Colab Notebooks/Student_dataset.xlsx'
df = pd.read_excel('/content/drive/My Drive/Colab Notebooks/Student_dataset.xlsx')
print(df.head())

#Initialization
import numpy as np

def initialize_parameters(layer_dims):
    np.random.seed(3)
    print("Layer Dimensions:", layer_dims)
    parameters = {}
    L = len(layer_dims)
    print("Total No. of layers in NN:", L)
    for i in range(1, L):
        parameters['W' + str(i)] = np.ones((layer_dims[i-1], layer_dims[i])) * 0.1
        parameters['b' + str(i)] = np.zeros((layer_dims[i], 1))
    return parameters

import numpy as np

# Linear forward propagation for a single layer
def linear_forward(A_prev, W, b):
    Z = np.dot(W.T, A_prev) + b
    return Z

# ReLU activation function
def relu(Z):
    return np.maximum(0, Z)

# Forward propagation for the entire network
def L_layer_forward(X, parameters):
    A = X
    caches = []
    L = len(parameters) // 2  # number of layers

    # Loop through the hidden layers
    for i in range(1, L):
        A_prev = A
        W = parameters['W' + str(i)]
        b = parameters['b' + str(i)]
        Z = linear_forward(A_prev, W, b)
        A = relu(Z)  # Apply ReLU activation

        cache = (A_prev, W, b, Z)
        caches.append(cache)

    # Output layer
    W_out = parameters['W' + str(L)]
    b_out = parameters['b' + str(L)]
    Z_out = linear_forward(A, W_out, b_out)

    # If output layer uses sigmoid (binary classification) or softmax (multi-class)
    AL = Z_out  # You may apply an activation function like sigmoid or softmax here

    return AL, caches

# Test the functions
layer_dims=[2,2,1]
parameters = initialize_parameters(layer_dims)
print("Initialized parameters:",parameters)

#Example input
X = np.random.randn(2,5)
AL, caches = L_layer_forward(X, parameters)
print("Output of forward propagation:", AL)
